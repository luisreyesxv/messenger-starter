#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const cookie = require("cookie");
const { jwtVerifyUser } = require("../helpers/jwtAuth");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

io.use(async (socket, next) => {
  let err;
  if (socket.handshake.headers.cookie) {
    const authToken = cookie.parse(socket.handshake.headers.cookie).authToken;
    if (authToken) {
      if (await jwtVerifyUser(authToken, next)) {
        next();
      } else {
        err = new Error("invalid AuthToken");
        next(err);
      }
    } else {
      err = new Error("must provide AuthToken");
      next(err);
    }
  } else {
    err = new Error("headers are missing");
    next(err);
  }
});

io.on("connection", (socket) => {

  socket.on("go-online", (id) => {
    // since this is a one-to-one chat, i am setting the "room" to be the user. If we decide to do larger chatrooms, we could make it conversation Id
    socket.join(id);
    if (!onlineUsers.has(id)) {
      onlineUsers.add(id);
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("new-message", (data) => {
    // since a user jumps into their own room when the go online, we now message them "directly" without broadcasting the message to the frontend to decipher
    socket.in(data.recipientId).emit("new-message", {
      message: data.message,
      sender: data.sender,
    });
  });
  socket.on("now-typing", (data) => {
    socket.in(data.recipientId).emit("now-typing", {
      id: data.id
  });
})
  socket.on("stopped-typing", (data) => {
    socket.in(data.recipientId).emit("stopped-typing", {
      id: data.id,
    });
  });

  socket.on("logout", (id) => {
    if (onlineUsers.has(id)) {
      onlineUsers.delete(id);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
